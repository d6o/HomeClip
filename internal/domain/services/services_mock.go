// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=services_mock.go -package=services
//

// Package services is a generated GoMock package.
package services

import (
	context "context"
	reflect "reflect"
	time "time"

	entities "github.com/d6o/homeclip/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentServiceInterface is a mock of DocumentServiceInterface interface.
type MockDocumentServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockDocumentServiceInterfaceMockRecorder is the mock recorder for MockDocumentServiceInterface.
type MockDocumentServiceInterfaceMockRecorder struct {
	mock *MockDocumentServiceInterface
}

// NewMockDocumentServiceInterface creates a new mock instance.
func NewMockDocumentServiceInterface(ctrl *gomock.Controller) *MockDocumentServiceInterface {
	mock := &MockDocumentServiceInterface{ctrl: ctrl}
	mock.recorder = &MockDocumentServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentServiceInterface) EXPECT() *MockDocumentServiceInterfaceMockRecorder {
	return m.recorder
}

// GetOrCreateDocument mocks base method.
func (m *MockDocumentServiceInterface) GetOrCreateDocument(ctx context.Context, id entities.DocumentID) (*entities.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrCreateDocument", ctx, id)
	ret0, _ := ret[0].(*entities.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrCreateDocument indicates an expected call of GetOrCreateDocument.
func (mr *MockDocumentServiceInterfaceMockRecorder) GetOrCreateDocument(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrCreateDocument", reflect.TypeOf((*MockDocumentServiceInterface)(nil).GetOrCreateDocument), ctx, id)
}

// UpdateDocumentContent mocks base method.
func (m *MockDocumentServiceInterface) UpdateDocumentContent(ctx context.Context, id entities.DocumentID, contentValue string) (*entities.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDocumentContent", ctx, id, contentValue)
	ret0, _ := ret[0].(*entities.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDocumentContent indicates an expected call of UpdateDocumentContent.
func (mr *MockDocumentServiceInterfaceMockRecorder) UpdateDocumentContent(ctx, id, contentValue any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDocumentContent", reflect.TypeOf((*MockDocumentServiceInterface)(nil).UpdateDocumentContent), ctx, id, contentValue)
}

// MockExpirationServiceInterface is a mock of ExpirationServiceInterface interface.
type MockExpirationServiceInterface struct {
	ctrl     *gomock.Controller
	recorder *MockExpirationServiceInterfaceMockRecorder
	isgomock struct{}
}

// MockExpirationServiceInterfaceMockRecorder is the mock recorder for MockExpirationServiceInterface.
type MockExpirationServiceInterfaceMockRecorder struct {
	mock *MockExpirationServiceInterface
}

// NewMockExpirationServiceInterface creates a new mock instance.
func NewMockExpirationServiceInterface(ctrl *gomock.Controller) *MockExpirationServiceInterface {
	mock := &MockExpirationServiceInterface{ctrl: ctrl}
	mock.recorder = &MockExpirationServiceInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpirationServiceInterface) EXPECT() *MockExpirationServiceInterfaceMockRecorder {
	return m.recorder
}

// ExpiresAt mocks base method.
func (m *MockExpirationServiceInterface) ExpiresAt(createdAt time.Time) time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpiresAt", createdAt)
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// ExpiresAt indicates an expected call of ExpiresAt.
func (mr *MockExpirationServiceInterfaceMockRecorder) ExpiresAt(createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpiresAt", reflect.TypeOf((*MockExpirationServiceInterface)(nil).ExpiresAt), createdAt)
}

// IsExpired mocks base method.
func (m *MockExpirationServiceInterface) IsExpired(createdAt time.Time) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsExpired", createdAt)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsExpired indicates an expected call of IsExpired.
func (mr *MockExpirationServiceInterfaceMockRecorder) IsExpired(createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsExpired", reflect.TypeOf((*MockExpirationServiceInterface)(nil).IsExpired), createdAt)
}

// TimeUntilExpiration mocks base method.
func (m *MockExpirationServiceInterface) TimeUntilExpiration(createdAt time.Time) time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeUntilExpiration", createdAt)
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// TimeUntilExpiration indicates an expected call of TimeUntilExpiration.
func (mr *MockExpirationServiceInterfaceMockRecorder) TimeUntilExpiration(createdAt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeUntilExpiration", reflect.TypeOf((*MockExpirationServiceInterface)(nil).TimeUntilExpiration), createdAt)
}
