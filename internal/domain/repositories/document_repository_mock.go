// Code generated by MockGen. DO NOT EDIT.
// Source: document_repository.go
//
// Generated by this command:
//
//	mockgen -source=document_repository.go -destination=document_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	reflect "reflect"

	entities "github.com/d6o/homeclip/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockDocumentRepository is a mock of DocumentRepository interface.
type MockDocumentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentRepositoryMockRecorder
	isgomock struct{}
}

// MockDocumentRepositoryMockRecorder is the mock recorder for MockDocumentRepository.
type MockDocumentRepositoryMockRecorder struct {
	mock *MockDocumentRepository
}

// NewMockDocumentRepository creates a new mock instance.
func NewMockDocumentRepository(ctrl *gomock.Controller) *MockDocumentRepository {
	mock := &MockDocumentRepository{ctrl: ctrl}
	mock.recorder = &MockDocumentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentRepository) EXPECT() *MockDocumentRepositoryMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockDocumentRepository) Exists(ctx context.Context, id entities.DocumentID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockDocumentRepositoryMockRecorder) Exists(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockDocumentRepository)(nil).Exists), ctx, id)
}

// FindByID mocks base method.
func (m *MockDocumentRepository) FindByID(ctx context.Context, id entities.DocumentID) (*entities.Document, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", ctx, id)
	ret0, _ := ret[0].(*entities.Document)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockDocumentRepositoryMockRecorder) FindByID(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockDocumentRepository)(nil).FindByID), ctx, id)
}

// Save mocks base method.
func (m *MockDocumentRepository) Save(ctx context.Context, document *entities.Document) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, document)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockDocumentRepositoryMockRecorder) Save(ctx, document any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockDocumentRepository)(nil).Save), ctx, document)
}
