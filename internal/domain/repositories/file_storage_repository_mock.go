// Code generated by MockGen. DO NOT EDIT.
// Source: file_storage_repository.go
//
// Generated by this command:
//
//	mockgen -source=file_storage_repository.go -destination=file_storage_repository_mock.go -package=repositories
//

// Package repositories is a generated GoMock package.
package repositories

import (
	context "context"
	io "io"
	reflect "reflect"

	entities "github.com/d6o/homeclip/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockFileStorageRepository is a mock of FileStorageRepository interface.
type MockFileStorageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageRepositoryMockRecorder
	isgomock struct{}
}

// MockFileStorageRepositoryMockRecorder is the mock recorder for MockFileStorageRepository.
type MockFileStorageRepositoryMockRecorder struct {
	mock *MockFileStorageRepository
}

// NewMockFileStorageRepository creates a new mock instance.
func NewMockFileStorageRepository(ctrl *gomock.Controller) *MockFileStorageRepository {
	mock := &MockFileStorageRepository{ctrl: ctrl}
	mock.recorder = &MockFileStorageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileStorageRepository) EXPECT() *MockFileStorageRepositoryMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockFileStorageRepository) Delete(ctx context.Context, attachmentID entities.AttachmentID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, attachmentID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFileStorageRepositoryMockRecorder) Delete(ctx, attachmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFileStorageRepository)(nil).Delete), ctx, attachmentID)
}

// Exists mocks base method.
func (m *MockFileStorageRepository) Exists(ctx context.Context, attachmentID entities.AttachmentID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx, attachmentID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockFileStorageRepositoryMockRecorder) Exists(ctx, attachmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockFileStorageRepository)(nil).Exists), ctx, attachmentID)
}

// Retrieve mocks base method.
func (m *MockFileStorageRepository) Retrieve(ctx context.Context, attachmentID entities.AttachmentID) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Retrieve", ctx, attachmentID)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Retrieve indicates an expected call of Retrieve.
func (mr *MockFileStorageRepositoryMockRecorder) Retrieve(ctx, attachmentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Retrieve", reflect.TypeOf((*MockFileStorageRepository)(nil).Retrieve), ctx, attachmentID)
}

// Store mocks base method.
func (m *MockFileStorageRepository) Store(ctx context.Context, attachmentID entities.AttachmentID, reader io.Reader) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", ctx, attachmentID, reader)
	ret0, _ := ret[0].(error)
	return ret0
}

// Store indicates an expected call of Store.
func (mr *MockFileStorageRepositoryMockRecorder) Store(ctx, attachmentID, reader any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockFileStorageRepository)(nil).Store), ctx, attachmentID, reader)
}
