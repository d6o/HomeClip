// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mocks.go -package=application
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	reflect "reflect"

	commands "github.com/d6o/homeclip/internal/application/commands"
	dtos "github.com/d6o/homeclip/internal/application/dtos"
	queries "github.com/d6o/homeclip/internal/application/queries"
	entities "github.com/d6o/homeclip/internal/domain/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockUpdateContentCommandHandler is a mock of UpdateContentCommandHandler interface.
type MockUpdateContentCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateContentCommandHandlerMockRecorder
	isgomock struct{}
}

// MockUpdateContentCommandHandlerMockRecorder is the mock recorder for MockUpdateContentCommandHandler.
type MockUpdateContentCommandHandlerMockRecorder struct {
	mock *MockUpdateContentCommandHandler
}

// NewMockUpdateContentCommandHandler creates a new mock instance.
func NewMockUpdateContentCommandHandler(ctrl *gomock.Controller) *MockUpdateContentCommandHandler {
	mock := &MockUpdateContentCommandHandler{ctrl: ctrl}
	mock.recorder = &MockUpdateContentCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateContentCommandHandler) EXPECT() *MockUpdateContentCommandHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockUpdateContentCommandHandler) Handle(ctx context.Context, cmd commands.UpdateContentCommand) (*dtos.UpdateContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(*dtos.UpdateContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockUpdateContentCommandHandlerMockRecorder) Handle(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockUpdateContentCommandHandler)(nil).Handle), ctx, cmd)
}

// MockUploadFileCommandHandler is a mock of UploadFileCommandHandler interface.
type MockUploadFileCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUploadFileCommandHandlerMockRecorder
	isgomock struct{}
}

// MockUploadFileCommandHandlerMockRecorder is the mock recorder for MockUploadFileCommandHandler.
type MockUploadFileCommandHandlerMockRecorder struct {
	mock *MockUploadFileCommandHandler
}

// NewMockUploadFileCommandHandler creates a new mock instance.
func NewMockUploadFileCommandHandler(ctrl *gomock.Controller) *MockUploadFileCommandHandler {
	mock := &MockUploadFileCommandHandler{ctrl: ctrl}
	mock.recorder = &MockUploadFileCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploadFileCommandHandler) EXPECT() *MockUploadFileCommandHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockUploadFileCommandHandler) Handle(ctx context.Context, cmd commands.UploadFileCommand) (*entities.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(*entities.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockUploadFileCommandHandlerMockRecorder) Handle(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockUploadFileCommandHandler)(nil).Handle), ctx, cmd)
}

// MockDeleteFileCommandHandler is a mock of DeleteFileCommandHandler interface.
type MockDeleteFileCommandHandler struct {
	ctrl     *gomock.Controller
	recorder *MockDeleteFileCommandHandlerMockRecorder
	isgomock struct{}
}

// MockDeleteFileCommandHandlerMockRecorder is the mock recorder for MockDeleteFileCommandHandler.
type MockDeleteFileCommandHandlerMockRecorder struct {
	mock *MockDeleteFileCommandHandler
}

// NewMockDeleteFileCommandHandler creates a new mock instance.
func NewMockDeleteFileCommandHandler(ctrl *gomock.Controller) *MockDeleteFileCommandHandler {
	mock := &MockDeleteFileCommandHandler{ctrl: ctrl}
	mock.recorder = &MockDeleteFileCommandHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDeleteFileCommandHandler) EXPECT() *MockDeleteFileCommandHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockDeleteFileCommandHandler) Handle(ctx context.Context, cmd commands.DeleteFileCommand) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, cmd)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockDeleteFileCommandHandlerMockRecorder) Handle(ctx, cmd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockDeleteFileCommandHandler)(nil).Handle), ctx, cmd)
}

// MockGetContentQueryHandler is a mock of GetContentQueryHandler interface.
type MockGetContentQueryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetContentQueryHandlerMockRecorder
	isgomock struct{}
}

// MockGetContentQueryHandlerMockRecorder is the mock recorder for MockGetContentQueryHandler.
type MockGetContentQueryHandlerMockRecorder struct {
	mock *MockGetContentQueryHandler
}

// NewMockGetContentQueryHandler creates a new mock instance.
func NewMockGetContentQueryHandler(ctrl *gomock.Controller) *MockGetContentQueryHandler {
	mock := &MockGetContentQueryHandler{ctrl: ctrl}
	mock.recorder = &MockGetContentQueryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetContentQueryHandler) EXPECT() *MockGetContentQueryHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockGetContentQueryHandler) Handle(ctx context.Context, query queries.GetContentQuery) (*dtos.GetContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*dtos.GetContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockGetContentQueryHandlerMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGetContentQueryHandler)(nil).Handle), ctx, query)
}

// MockGetFileQueryHandler is a mock of GetFileQueryHandler interface.
type MockGetFileQueryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockGetFileQueryHandlerMockRecorder
	isgomock struct{}
}

// MockGetFileQueryHandlerMockRecorder is the mock recorder for MockGetFileQueryHandler.
type MockGetFileQueryHandlerMockRecorder struct {
	mock *MockGetFileQueryHandler
}

// NewMockGetFileQueryHandler creates a new mock instance.
func NewMockGetFileQueryHandler(ctrl *gomock.Controller) *MockGetFileQueryHandler {
	mock := &MockGetFileQueryHandler{ctrl: ctrl}
	mock.recorder = &MockGetFileQueryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGetFileQueryHandler) EXPECT() *MockGetFileQueryHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockGetFileQueryHandler) Handle(ctx context.Context, query queries.GetFileQuery) (*queries.FileResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].(*queries.FileResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockGetFileQueryHandlerMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockGetFileQueryHandler)(nil).Handle), ctx, query)
}

// MockListFilesQueryHandler is a mock of ListFilesQueryHandler interface.
type MockListFilesQueryHandler struct {
	ctrl     *gomock.Controller
	recorder *MockListFilesQueryHandlerMockRecorder
	isgomock struct{}
}

// MockListFilesQueryHandlerMockRecorder is the mock recorder for MockListFilesQueryHandler.
type MockListFilesQueryHandlerMockRecorder struct {
	mock *MockListFilesQueryHandler
}

// NewMockListFilesQueryHandler creates a new mock instance.
func NewMockListFilesQueryHandler(ctrl *gomock.Controller) *MockListFilesQueryHandler {
	mock := &MockListFilesQueryHandler{ctrl: ctrl}
	mock.recorder = &MockListFilesQueryHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockListFilesQueryHandler) EXPECT() *MockListFilesQueryHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockListFilesQueryHandler) Handle(ctx context.Context, query queries.ListFilesQuery) ([]*entities.Attachment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx, query)
	ret0, _ := ret[0].([]*entities.Attachment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Handle indicates an expected call of Handle.
func (mr *MockListFilesQueryHandlerMockRecorder) Handle(ctx, query any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockListFilesQueryHandler)(nil).Handle), ctx, query)
}

// MockDocumentApplicationService is a mock of DocumentApplicationService interface.
type MockDocumentApplicationService struct {
	ctrl     *gomock.Controller
	recorder *MockDocumentApplicationServiceMockRecorder
	isgomock struct{}
}

// MockDocumentApplicationServiceMockRecorder is the mock recorder for MockDocumentApplicationService.
type MockDocumentApplicationServiceMockRecorder struct {
	mock *MockDocumentApplicationService
}

// NewMockDocumentApplicationService creates a new mock instance.
func NewMockDocumentApplicationService(ctrl *gomock.Controller) *MockDocumentApplicationService {
	mock := &MockDocumentApplicationService{ctrl: ctrl}
	mock.recorder = &MockDocumentApplicationServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDocumentApplicationService) EXPECT() *MockDocumentApplicationServiceMockRecorder {
	return m.recorder
}

// GetContent mocks base method.
func (m *MockDocumentApplicationService) GetContent(ctx context.Context, documentID string) (*dtos.GetContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContent", ctx, documentID)
	ret0, _ := ret[0].(*dtos.GetContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContent indicates an expected call of GetContent.
func (mr *MockDocumentApplicationServiceMockRecorder) GetContent(ctx, documentID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContent", reflect.TypeOf((*MockDocumentApplicationService)(nil).GetContent), ctx, documentID)
}

// UpdateContent mocks base method.
func (m *MockDocumentApplicationService) UpdateContent(ctx context.Context, documentID, content string) (*dtos.UpdateContentResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateContent", ctx, documentID, content)
	ret0, _ := ret[0].(*dtos.UpdateContentResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateContent indicates an expected call of UpdateContent.
func (mr *MockDocumentApplicationServiceMockRecorder) UpdateContent(ctx, documentID, content any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateContent", reflect.TypeOf((*MockDocumentApplicationService)(nil).UpdateContent), ctx, documentID, content)
}
